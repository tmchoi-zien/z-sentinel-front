"use client";
import { useState } from "react";
import * as TEXT from "@/locale/ko/modal.json";
import VulnerabilityDetailLogic from "./logic";

import Button from "@/components/commons/Button";
import Highlighter from "@/components/commons/Highlighter";
import VulnsDetailSkeleton from "@/components/skeletons/VulnsDetailSkeleton";

const m = TEXT["vulnerability-detail"];

interface Props {
  data: any;
}

export default function VulnerabilityDetail({ data }: Props) {
  const { cveName } = data;
  const vuln = VulnerabilityDetailLogic({ cveName });
  const [show, setShow] = useState(false);

  if (!vuln) return <VulnsDetailSkeleton />;

  const handleGoToPage = (type: string) => {
    if (type === "cve") window.open(`https://www.cve.org/`);
    else if (type === "detail") window.open(`https://www.cvedetails.com/`);
  };

  return (
    <>
      {/* Header */}
      <div>
        <Highlighter value={"High 10"} className="text-sm" />
        <div className="mt-[10px] text-lg font-bold">{vuln.name}</div>
      </div>

      <div className="flex flex-col gap-[30px] mt-[30px]">
        {/* Info */}
        <div className="flex flex-col gap-[12px] text-sm">
          <div className="flex flex-row gap-[20px]">
            <span className="w-[62px] text-gray">{m["published"]}</span>
            <span>{vuln.publishedDate}</span>
          </div>
          <div className="flex flex-row gap-[20px]">
            <span className="w-[62px] text-gray">{m["cwe"]}</span>
            {vuln.cwe.map((item, index) => (
              <span key={index}>{item}</span>
            ))}
          </div>
        </div>

        {/* More */}
        <div className="flex flex-row gap-[10px]">
          <Button
            text={"CVE.org"}
            icon={"/icons/link_external.svg"}
            onClick={() => handleGoToPage("cve")}
          />
          <Button
            text={"CVEdetails.com"}
            icon={"/icons/link_external.svg"}
            onClick={() => handleGoToPage("detail")}
          />
        </div>

        {/* Description */}
        <div className="flex flex-col gap-[15px]">
          <div className="text-main-color text-[15px]">{m["description"]}</div>
          <div className="py-[25px] px-[20px] bg-[#151a26] rounded-[15px] font-normal">
            {vuln.description}
          </div>
        </div>

        {/* Severity */}
        <div className="flex flex-col gap-[15px]">
          <div className="text-main-color text-[15px]">{m["severity"]}</div>
          <div className="font-bold text-[14px]">{m["cvss"]}</div>
          <div className="py-[25px] px-[20px] bg-[#151a26] rounded-[15px] font-normal">
            <div className="flex flex-col gap-[10px]">
              <div className="flex gap-[10px] text-sm">
                <span>{m["base-score"]}</span>{" "}
                <Highlighter value={vuln.cvss.baseScore} className="text-xs" />
              </div>
              <div className="text-gray">{vuln.cvss.vector}</div>
              <div className="flex gap-[10px] text-sm">
                <span>{m["exploitability-score"]}</span>{" "}
                <Highlighter
                  value={vuln.cvss.exploitabilityScore}
                  className="text-xs"
                />
              </div>
              <div className="flex gap-[10px] text-sm">
                <span>{m["impact-score"]}</span>{" "}
                <Highlighter
                  value={vuln.cvss.impactScore}
                  className="text-xs"
                />
              </div>
            </div>
          </div>
        </div>

        {/* Products affected */}
        <div className="flex flex-col gap-[15px]">
          <div className="flex flex-row justify-between">
            <div className="text-main-color text-[15px]">
              {m["product-affected"]}
            </div>
            <div
              className="text-[15px] underline cursor-pointer"
              onClick={() => setShow(!show)}
            >
              {m["more"]}
            </div>
          </div>
          <div
            className={`
              py-[25px] px-[20px] bg-[#151a26] rounded-[15px]
            `}
          >
            <div
              className={`
                overflow-hidden ${show ? "max-h-none" : "max-h-[calc(1.5rem*10)]"}
              `}
            >
              <p className={`font-normal`}>{vuln.affectedProducts[0]}</p>
              {/* <p className={`font-normal`}>
                Description: SQL Injection (SQLi) is a web security
                vulnerability that allows an attacker to interfere with an
                application's database queries. It occurs when user input is
                improperly sanitized and directly embedded into SQL statements,
                enabling attackers to manipulate the database. Description: SQL
                Injection (SQLi) is a web security vulnerability that allows an
                attacker to interfere with an application's database queries. It
                occurs when user input is improperly sanitized and directly
                embedded into SQL statements, enabling attackers to manipulate
                the database. Description: SQL Injection (SQLi) is a web
                security vulnerability that allows an attacker to interfere with
                an application's database queries. It occurs when user input is
                improperly sanitized and directly embedded into SQL statements,
                enabling attackers to manipulate the database. Description: SQL
                Injection (SQLi) is a web security vulnerability that allows an
                attacker to interfere with an application's database queries. It
                occurs when user input is improperly sanitized and directly
                embedded into SQL statements, enabling attackers to manipulate
                the database.
              </p> */}
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
