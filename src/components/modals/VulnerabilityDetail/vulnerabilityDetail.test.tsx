import {
  fireEvent,
  render,
  screen,
  waitFor,
  within,
} from "@testing-library/react";

import TEST from "@/locale/ko/test-id.json";
import TEXT from "@/locale/ko/modal.json";
import VulnerabilityDetailLogic from "./logic";
import VulnerabilityDetail from "./modal";

const m = TEXT["vulnerability-detail"];
const t = TEST["modals"]["vulnerability-detail"];

jest.mock("./logic");

describe(`${t["title"]}`, () => {
  beforeEach(() => {
    (VulnerabilityDetailLogic as jest.Mock).mockReturnValue({});
    render(<VulnerabilityDetail />);
  });

  test("title 표출", () => {
    expect(screen.getByText(m["title"])).toBeInTheDocument();
  });

  test("AREA: Header", () => {
    const area = screen.getByTestId(t["area-header"]);

    expect(area).toHaveTextContent(`취약점 명`);
    expect(area).toHaveTextContent(`취약점 발생일`);
    expect(area).toHaveTextContent(`CWE`);
  });

  test("AREA: Description", () => {
    const area = screen.getByTestId(t["area-description"]);

    expect(area).toHaveTextContent(`취약점 설명`);
  });

  test("AREA: Severity", () => {
    const area = screen.getByTestId(t["area-severity"]);

    expect(area).toHaveTextContent(`CVSS`);
  });

  test("AREA: Products affected", () => {
    const area = screen.getByTestId(t["area-products-affected"]);

    expect(area).toHaveTextContent(`affected`);
  });
});
